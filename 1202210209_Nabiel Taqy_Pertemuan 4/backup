public class Node {
    int data;
    Node left;
    Node right;

    public static void main(String[] args) {
        Node root = new Node(1);
        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);
        Node node5 = new Node(5);
        Node node6 = new Node(6);
        Node node7 = new Node(7);

        root.setLeft(node2);
        node2.setLeft(node4);
        node2.setRight(node5);
        node5.setLeft(node7);
        root.setRight(node3);
        node3.setRight(node6);

        System.out.println("Inorder Traversal:");
        root.printInorder(root);
        System.out.println("\nPostorder Traversal:");
        root.printPostorder(root);
        System.out.println("\nPreorder Traversal:");
        root.printPreorder(root);
        System.out.println("\nTree Structure:");
        root.print("", true);
    }

    // Constructor
    public Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }

    public void print(String prefix, boolean isTail) {
        if (right != null) {
            right.print(prefix + (isTail ? "│   " : "    "), false);
        }
        System.out.println(prefix + (isTail ? "\\-- " : "/-- ") + data);
        if (left != null) {
            left.print(prefix + (isTail ? "    " : "│   "), true);
        }
    }

    public void printPreorder(Node node) {
        if (node == null)
            return;
        System.out.print(node.data + " ");
        printPreorder(node.left);
        printPreorder(node.right);
    }

    public void printPostorder(Node node) {
        if (node == null)
            return;
        printPostorder(node.left);
        printPostorder(node.right);
        System.out.print(node.data + " ");
    }

    public void printInorder(Node node) {
        if (node == null)
            return;
        printInorder(node.left);
        System.out.print(node.data + " ");
        printInorder(node.right);
    }

    // Menetapkan anak kiri
    public void setLeft(Node node) {
        this.left = node;
    }

    // Menetapkan anak kanan
    public void setRight(Node node) {
        this.right = node;
    }
}
